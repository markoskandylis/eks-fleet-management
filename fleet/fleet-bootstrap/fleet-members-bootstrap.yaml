# Push doenst use that in general
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: fleet-member-bootstrap
  namespace: argocd
spec:
  syncPolicy:
    preserveResourcesOnDeletion: false
  goTemplate: true
  goTemplateOptions:
    - missingkey=error
  generators:
    - matrix:
        generators:
          - matrix:
              generators:
                - clusters:
                    selector:
                      matchLabels:
                        fleet_member: hub-cluster
                    values:
                      chartName: application-sets
                      chartRepo: "12345678910.dkr.ecr.eu-west-2.amazonaws.com"
                      chartPath: "charts/application-sets"
                      applicationSetGroup: "fleet"
                      groupRelease: '{{default "" (index .metadata.labels "fleetRelease")}}'
                      useSelectors: "false"
                      useVersionSelectors: "true"
                - git:
                    repoURL: "{{ .metadata.annotations.fleet_repo_url }}"
                    revision: "{{ .metadata.annotations.fleet_repo_revision }}"
                    files:
                      - path: "{{ .metadata.annotations.fleet_repo_basepath }}/bootstrap/versions/applicationSets.yaml"
          - list:
              elementsYaml: |
                {{- $globals := .releases.globals -}}
                {{- $releaseTypes := index .releases .values.applicationSetGroup | toJson | fromJson -}}
                {{- $groupRelease := .values.groupRelease}}
                {{- $firstRelease := index $releaseTypes 0 -}}
                {{- $result := list -}}
                {{- /* If the values of the group release is empty or we dont use version selectors then we use only the first element of the list */ -}}
                {{- if or (eq  $groupRelease "") (eq .values.useVersionSelectors "false") -}}
                  {{- $mergedRelease := merge $firstRelease $globals -}}
                  {{- $mergedRelease = merge $mergedRelease (dict "totalReleases" (len $releaseTypes)) -}}
                  {{- $result = append $result $mergedRelease -}}
                {{- else -}}
                {{- /* We look for the defined releases */ -}}
                {{- $found := false -}}
                {{- range $releaseType := $releaseTypes -}}
                  {{- if eq $releaseType.type  $groupRelease -}}
                    {{- $found = true -}}
                  {{- end -}}
                {{- end -}}
                {{- if $found -}}
                  {{- range $releaseType := $releaseTypes -}}
                    {{- $mergedReleaseValues := merge $releaseType $globals -}}
                    {{- $mergedReleaseValues = merge $mergedReleaseValues (dict "totalReleases" (len $releaseTypes)) -}}
                    {{- $result = append $result $mergedReleaseValues -}}
                  {{- end -}}
                {{- else -}}
                  {{- $mergedRelease := merge $firstRelease $globals -}}
                  {{- $mergedRelease = merge $mergedRelease (dict "totalReleases" (len $releaseTypes)) -}}
                  {{- $result = append $result $mergedRelease -}}
                {{- end -}}
                {{- end -}}
                {{ $result | toJson }}
  ###################################################
  #base template (everything common)
  ###################################################
  template:
    metadata:
      name: "fleet-member-bootstrap-{{.values.chartName}}-{{.type | lower }}"
    spec:
      project: default
      destination:
        namespace: "argocd"
        name: "{{ .name }}"
      # syncPolicy is identical for both variants
      syncPolicy:
        automated:
          selfHeal: false
          allowEmpty: true
          prune: false
        retry:
          limit: 100
        syncOptions:
          - CreateNamespace=true
          - ServerSideApply=true
  ###################################################
  # conditional sources
  ###################################################
  templatePatch: |
    spec:
      sources:
        - ref: values
          repoURL: '{{.metadata.annotations.fleet_repo_url}}'
          targetRevision: '{{.metadata.annotations.fleet_repo_revision}}'
        - repoURL: '{{.metadata.annotations.fleet_repo_url}}'
          path: '{{.metadata.annotations.fleet_repo_basepath}}/fleet-bootstrap/members-init-v2'
          targetRevision: '{{.metadata.annotations.fleet_repo_revision}}'
       {{- if  eq .use_helm_repo_path "false" }}
        - repoURL: '{{default .values.chartRepo .chartRepo }}'
          chart: '{{ default .values.chartName .ecrChartName  }}'
          targetRevision: '{{.version}}'
      {{- else }}
        - repoURL: '{{default (index .metadata.annotations "chartRepoUrl") (index . "chartRepoUrl") }}'
          path:    '{{ default .values.chartPath (index . "chartRepoPath")}}'
          targetRevision: '{{default  (index .metadata.annotations "chartRepoRevision") (index . "chartRepoRevision") }}'
      {{- end }}
          helm:
            ignoreMissingValueFiles: true
            valuesObject:
              useSelectors: '{{.values.useSelectors}}'
              useVersionSelectors: '{{.values.useVersionSelectors}}'
              applicationSetGroup: '{{.values.applicationSetGroup}}'
              mergeValues:
                fleetBootstrap: 
                  use: true
              releaseType: '{{.type | lower }}'
              {{- if eq .values.useVersionSelectors "true"}}
              releases:
                {{.values.applicationSetGroup}}Release: '{{.type | lower}}'
              {{- end }}
              {{- if eq .values.useSelectors "false"}}
              globalSelectors:
                fleet_member: spoke
                use_remote_argo: 'true'
              {{- end }}  
            valueFiles:
              - $values/fleet/fleet-bootstrap/members-init-v2/fleet-spoke-bootstrap-values.yaml
