apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: fleet-hub-secrets
  namespace: argocd
spec:
  goTemplate: true
  syncPolicy:
    preserveResourcesOnDeletion: false
  generators:
  - matrix:
      generators:
        - clusters:
            selector:
              matchLabels:
                fleet_member: hub-cluster
            values:
              chartName: fleet-secret
              chartPath: "charts/fleet-secret"
              applicationSetGroup: "fleet"
              fleet_memeber: hub-cluster           
        - matrix:
            generators:
            # Will have to rething the way of registration
              - git:
                  repoURL: '{{.metadata.annotations.fleet_repo_url}}'
                  revision: '{{.metadata.annotations.fleet_repo_revision}}'
                  files:
                    - path: '{{.metadata.annotations.fleet_repo_basepath}}/bootstrap/versions/fleetSecrets.yaml'
              - git:
                  repoURL: '{{.metadata.annotations.fleet_repo_url}}'
                  revision: '{{.metadata.annotations.fleet_repo_revision}}'
                  files:
                    - path: '{{.metadata.annotations.fleet_repo_basepath}}/fleet-bootstrap/fleet-members/{{.name}}/*.yaml'
  ###################################################
  #base template (everything common)
  ###################################################
  template:
    metadata:
      name: 'fleet-hub-secrets-{{.clusterName}}'
    spec:
      project: default
      destination:
        namespace: argocd
        name: '{{ .name }}'
      syncPolicy:
        automated:
          selfHeal: false
          allowEmpty: true
          prune: false
        retry:
          limit: 100
        syncOptions:
          - CreateNamespace=true
          - ServerSideApply=true
  ###################################################
  # conditional sources
  ###################################################
  templatePatch: |
    {{- $commonValuesPath := printf "%s/%s/values.yaml" .values.applicationSetGroup .values.chartName -}}
    {{- $repoNames := list "addons" "resources" -}}

    {{- $environment := .metadata.labels.environment -}}
    
    {{- $tenantPath := "" -}}
    {{- if and (hasKey . "tenant") .tenant -}}
      {{- $tenantPath = printf "%s" .tenant -}}
    {{- else if (index .metadata.labels "tenant") -}}
      {{- $tenantPath = printf "%s" .metadata.labels.tenant -}}
    {{- end -}}


    {{- $clusterName := "" -}}
    {{- if and (hasKey . "clusterName") .clusterName -}}
      {{- $clusterName = .clusterName -}}
    {{- else  -}}
      {{- $clusterName = .name -}}
    {{- end -}}

    {{- $pathPatterns := list
      (printf "%s/defaults" $tenantPath) 
      (printf "%s/environments/%s/defaults" $tenantPath $environment) 
      (printf "%s/environments/%s/clusters/%s" $tenantPath $environment $clusterName) 
    -}}

    spec:
      sources:
      {{- range $repoName := $repoNames }}
        - repoURL: '{{default (index $.metadata.annotations (printf "%s_repo_url" $repoName)) (index $ (printf "%s_repo_url" $repoName))}}'
          targetRevision: '{{default (index $.metadata.annotations (printf "%s_repo_revision" $repoName)) (index $ (printf "%s_repo_revision" $repoName))}}'
          ref: {{$repoName}}Values
      {{- end }}
        # Temporary workaround for releases
        {{- $release := index .releases 0 }}
        {{- if eq $release.use_helm_repo_path "false" }}
        - repoURL: '{{ $release.chartRepo }}'
          chart: '{{ $release.ecrChartName }}'
          targetRevision: '{{ $release.version }}'
        {{- else }}
        - repoURL: '{{ .metadata.annotations.fleet_repo_url }}'
          path: '{{ .values.chartPath }}'
          targetRevision: '{{ default .metadata.annotations.fleet_repo_revision (index . "targetRevision")}}'
        {{- end }}
          helm:
            releaseName: '{{.clusterName}}'
            valuesObject:
              secretStore:
                enabled: false
              externalSecret:
                enabled: true
                githubSecret: '{{default "" .githubSecret}}'
                githubSecretName: '{{default "" .githubSecretName}}'
                server: remote
                secretStoreRefName: 'fleet-eks-secret-store'
                secretStoreRefKind: SecretStore
                clusterName: '{{.clusterName}}'
                secretManagerSecretName: '{{.secretManagerSecretName}}'
                labels:
                  tenant: '{{.tenant}}'
                  environment: '{{.environment}}'
                  use_fleet_ack: '{{default "false" .argocd_config.use_fleet_ack}}'
                  use_remote_argo: '{{default "false" .use_remote_argo}}'
                  use_github_secret: '{{default "false" .githubSecret}}'
                  create_argocd_ingress: '{{default "false" .use_argocd_ingress}}'
                  enable_remote_resources: '{{default "false" .enable_remote_resources}}'
                  enable_remote_addons: '{{default "false" .enable_remote_addons}}'
                annotations:
                  secret_manager_secret_name: '{{.secretManagerSecretName}}'
                  addons_repo_secret: '{{.githubSecretName}}'
                  addons_repo_basepath: '{{default .metadata.annotations.addons_repo_basepath .addons_repo_basepath}}'
                  addons_repo_path: '{{default .metadata.annotations.addons_repo_path .addons_repo_path}}'
                  addons_repo_revision: '{{default .metadata.annotations.addons_repo_revision .addons_repo_revision}}'
                  addons_repo_url:  '{{default .metadata.annotations.addons_repo_url .annotations.addons_repo_url}}'
                  fleet_repo_secret: '{{.githubSecretName}}'
                  fleet_repo_basepath: '{{.metadata.annotations.fleet_repo_basepath}}'
                  fleet_repo_path: '{{.metadata.annotations.fleet_repo_path}}'
                  fleet_repo_revision: '{{.metadata.annotations.fleet_repo_revision}}'
                  fleet_repo_url:  '{{.metadata.annotations.fleet_repo_url}}'
                  resources_repo_secret: '{{.githubSecretName}}'
                  resources_repo_basepath: '{{default .metadata.annotations.resources_repo_basepath .resources_repo_basepath}}'
                  resources_repo_path: '{{default .metadata.annotations.resources_repo_path .annotations.resources_repo_path}}'
                  resources_repo_revision: '{{default .metadata.annotations.resources_repo_revision .resources_repo_revision}}'
                  resources_repo_url:  '{{default .metadata.annotations.resources_repo_url .resources_repo_revision}}'
            ignoreMissingValueFiles: true
            valueFiles:
            {{- range $repoName := $repoNames }}
              {{- $repoRef := printf "%sValues" $repoName }}
              {{- $basePath := default (index $.metadata.annotations (printf "%s_repo_basepath" $repoName)) (index $ (printf "%s_repo_basepath" $repoName)) }}
              {{- range $pattern := $pathPatterns }}
              - ${{ $repoRef }}/{{ $basePath }}/{{ $pattern }}/{{ $commonValuesPath }}
              {{- end }}
            {{- end }}